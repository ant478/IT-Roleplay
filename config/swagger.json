{
  "openapi": "3.0.0",
  "servers": [{
    "description": "",
    "url": "/api/v1"
  }],
  "info": {
    "version": "0.1.0",
    "title": "IT Roleplay",
    "contact": {
      "email": "ant478@gmail.com"
    }
  },
  "paths": {
    "/user/register": {
      "post": {
        "tags": ["Users"],
        "summary": "Registration of a new user.",
        "requestBody": {
          "$ref": "#/components/requestBodies/RegisterNewUser"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/NewUserCreated"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": ["Users"],
        "summary": "Logging user in.",
        "requestBody": {
          "$ref": "#/components/requestBodies/LoginUser"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfulLogin"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/user/logout": {
      "post": {
        "tags": ["Users"],
        "summary": "Logging user out.",
        "responses": {
          "200": {
            "description": "SuccessfulLogout"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/characters": {
      "get": {
        "tags": ["Characters"],
        "summary": "Gets list of character short descriptions.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/CharactersList"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": ["Characters"],
        "summary": "Creates new character.",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateNewCharacter"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/NewCharacterCreated"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/characters/{characterId}": {
      "get": {
        "tags": ["Characters"],
        "summary": "Gets full profile of a character.",
        "parameters": [{
          "$ref": "#/components/parameters/CharacterId"
        }],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Character"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": ["Characters"],
        "summary": "Modifies character.",
        "parameters": [{
          "$ref": "#/components/parameters/CharacterId"
        }],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateCharacter"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Character"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": ["Characters"],
        "summary": "Deletes character.",
        "parameters": [{
          "$ref": "#/components/parameters/CharacterId"
        }],
        "responses": {
          "200": {
            "description": "Character successfully deleted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "description": "Error responce data with error code, message and stacktrace.",
        "properties": {
          "code": {
            "type": "integer",
            "example": 500
          },
          "message": {
            "type": "string",
            "example": "Oppps, something went wrong"
          },
          "stacktrace": {
            "type": "string",
            "example": "/.../.../.../"
          }
        },
        "required": ["code", "message", "stacktrace"]
      },
      "Timestamps": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "datetime",
            "example": "2019-02-21T14:54:42.779Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "datetime",
            "example": "2019-02-21T14:54:42.779Z"
          }
        },
        "required": ["createdAt", "updatedAt"]
      },
      "ID": {
        "type": "integer",
        "format": "int32",
        "minimum": 1,
        "description": "Objects identifier in the system.",
        "example": 1
      },
      "User": {
        "allOf": [{
          "type": "object",
          "description": "An instance of a user.",
          "properties": {
            "id": {
              "$ref": "#/components/schemas/ID"
            },
            "login": {
              "type": "string",
              "example": "ant478"
            },
            "email": {
              "type": "string",
              "format": "email",
              "example": "ant478@gmail.com"
            }
          },
          "required": ["id", "login", "email"]
        }, {
          "$ref": "#/components/schemas/Timestamps"
        }]
      },
      "UpdateCharacterData": {
        "type": "object",
        "description": "Data to update a character.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of a character.",
            "example": "Thomas Anderson"
          },
          "avatarUrl": {
            "type": "string",
            "format": "url",
            "description": "URL of an image that will be displayed as characters avatar.",
            "example": "https://upload.wikimedia.org/wikipedia/ru/4/4c/Neo2.jpg"
          },
          "data": {
            "$ref": "#/components/schemas/CharactersDataFull"
          }
        }
      },
      "NewCharacterData": {
        "allOf": [{
          "$ref": "#/components/schemas/UpdateCharacterData"
        }, {
          "type": "object",
          "description": "Data to create new character.",
          "properties": {
            "data": {
              "allOf": [{
                "$ref": "#/components/schemas/CharactersDataFull"
              }, {
                "required": ["attributes", "classes", "skills", "technologies", "perks"]
              }]
            }
          },
          "required": ["name", "data"]
        }]
      },
      "CharacterShort": {
        "allOf": [{
          "type": "object",
          "description": "Short description of a character.",
          "properties": {
            "id": {
              "$ref": "#/components/schemas/ID"
            },
            "name": {
              "type": "string",
              "description": "Name of a character.",
              "example": "Thomas Anderson"
            },
            "avatarUrl": {
              "type": "string",
              "format": "url",
              "description": "URL of an image that will be displayed as characters avatar.",
              "example": "https://upload.wikimedia.org/wikipedia/ru/4/4c/Neo2.jpg"
            },
            "author": {
              "$ref": "#/components/schemas/User"
            },
            "data": {
              "allOf": [{
                "$ref": "#/components/schemas/CharactersDataShort"
              }, {
                "required": ["attributes", "classes"]
              }]
            }
          },
          "required": ["id", "name", "author", "data"]
        }, {
          "$ref": "#/components/schemas/Timestamps"
        }]
      },
      "CharacterFull": {
        "allOf": [{
          "$ref": "#/components/schemas/CharacterShort"
        }, {
          "type": "object",
          "description": "Full description of a character.",
          "properties": {
            "data": {
              "allOf": [{
                "$ref": "#/components/schemas/CharactersDataFull"
              }, {
                "required": ["attributes", "classes", "skills", "technologies", "perks"]
              }]
            }
          }
        }]
      },
      "CharactersDataShort": {
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/CharacterIntegerPropertiesData"
          },
          "classes": {
            "$ref": "#/components/schemas/CharacterIntegerPropertiesData"
          }
        }
      },
      "CharactersDataFull": {
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/CharacterIntegerPropertiesData"
          },
          "classes": {
            "$ref": "#/components/schemas/CharacterIntegerPropertiesData"
          },
          "skills": {
            "$ref": "#/components/schemas/CharacterIntegerPropertiesData"
          },
          "technologies": {
            "$ref": "#/components/schemas/CharacterBooleanPropertiesData"
          },
          "perks": {
            "$ref": "#/components/schemas/CharacterBooleanPropertiesData"
          }
        }
      },
      "CharacterIntegerPropertiesData": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/IntegerPropertyValue"
        },
        "uniqueItems": true,
        "minLength": 1,
        "example": [{
          "id": 1,
          "value": 10
        }, {
          "id": 2,
          "value": 14
        }, {
          "id": 3,
          "value": 14
        },
          {
            "id": 4,
            "value": 12
          }, {
            "id": 5,
            "value": 16
          }, {
            "id": 6,
            "value": 8
          }
        ]
      },
      "CharacterBooleanPropertiesData": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/BooleanPropertyValue"
        },
        "uniqueItems": true,
        "minLength": 1,
        "example": [1, 3, 7, 5, 12]
      },
      "IntegerPropertyValue": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ID"
          },
          "value": {
            "type": "integer"
          }
        },
        "required": ["id", "value"]
      },
      "BooleanPropertyValue": {
        "allOf": [{
          "$ref": "#/components/schemas/ID"
        }, {
          "description": "ID of a characters property. If passed then character has that property and vice versa."
        }]
      },
      "UserRegistrationData": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string",
            "example": "ant478"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "ant478@gmail.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "123456"
          }
        },
        "required": ["login", "email", "password"]
      },
      "UserLoginData": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string",
            "example": "ant478"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "123456"
          }
        },
        "required": ["login", "password"]
      }
    },
    "parameters": {
      "CharacterId": {
        "in": "path",
        "name": "characterId",
        "schema": {
          "$ref": "#/components/schemas/ID"
        },
        "required": true
      }
    },
    "requestBodies": {
      "RegisterNewUser": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserRegistrationData"
            }
          }
        }
      },
      "CreateNewCharacter": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NewCharacterData"
            }
          }
        }
      },
      "UpdateCharacter": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateCharacterData"
            }
          }
        }
      },
      "LoginUser": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserLoginData"
            }
          }
        }
      }
    },
    "responses": {
      "NewUserCreated": {
        "description": "New user was created successfully. Returns instance of a new user.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "SuccessfulLogin": {
        "description": "User successfully logged in.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "CharactersList": {
        "description": "Characters list.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CharacterShort"
              },
              "uniqueItems": true
            }
          }
        }
      },
      "Character": {
        "description": "Instance of a character.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CharacterFull"
            }
          }
        }
      },
      "NewCharacterCreated": {
        "description": "New character was created successfully. Returns instance of a new character.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CharacterFull"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Passed arguments are not valid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "code": 400,
              "message": "Passed arguments are not valid.",
              "stacktrace": "/.../.../.../"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "code": 401,
              "message": "You are not authorized in the system.",
              "stacktrace": "/.../.../.../"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "code": 403,
              "message": "You do not have permission for this operation.",
              "stacktrace": "/.../.../.../"
            }
          }
        }
      },
      "NotFound": {
        "description": "The specified resource was not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "code": 404,
              "message": "Not found.",
              "stacktrace": "/.../.../.../"
            }
          }
        }
      },
      "Conflict": {
        "description": "Can't create instance with passed data.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "code": 409,
              "message": "Can't create instance with passed data.",
              "stacktrace": "/.../.../.../"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "code": 500,
              "message": "Internal server error.",
              "stacktrace": "/.../.../.../"
            }
          }
        }
      }
    }
  }
}
